steps:

- name: 'gcr.io/$PROJECT_ID/helm'
  id: generate manifest
  entrypoint: bash
  args:
  - '-c'
  - |
    ls
  # - 'template'
  # - '--output-dir'
  # - '/artifacts'
  # - './pinger'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1-b'
  - 'CLOUDSDK_CONTAINER_CLUSTER=hello-cloudbuild'
  # volumes:
  # - name: 'artifacts'
  #   path: '/artifacts'

# This step deploys the new version of our container image
# in the hello-cloudbuild Kubernetes Engine cluster.
# - name: 'gcr.io/cloud-builders/kubectl'
#   id: Deploy
#   args:
#   - 'apply'
#   - '-f'
#   - '/artifacts/pinger/templates/deployment.yaml'
#   env:
#   - 'CLOUDSDK_COMPUTE_ZONE=us-central1-b'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=hello-cloudbuild'
#   volumes:
#   - name: 'artifacts'
#     path: '/artifacts'

# Copy the files from storage needed to connect to git.
- name: 'gcr.io/cloud-builders/gsutil'
  id: copy ssh keys for github
  args: ['cp', 'gs://pipeline-test-20190604/*', '.']

- name: 'gcr.io/cloud-builders/gcloud'
  id: load github key
  args:
  - kms
  - decrypt
  - --ciphertext-file=id_rsa.enc
  - --plaintext-file=/root/.ssh/id_rsa
  - --location=global
  - --keyring=cloudbuilder
  - --key=github-key
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Set up git with key and domain.
- name: 'gcr.io/cloud-builders/git'
  id: set ssh key for github
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod 600 /root/.ssh/id_rsa
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_rsa
    EOF
    mv known_hosts /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

- name: 'gcr.io/cloud-builders/git'
  id: Copy to dev branch
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    ls
  volumes:
  - name: 'ssh'
    path: /root/.ssh